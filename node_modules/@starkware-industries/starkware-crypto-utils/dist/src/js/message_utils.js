"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertInMultiRange = exports.assertInRange = exports.Range = void 0;
var assert_1 = __importDefault(require("assert"));
function assertInRange(input, lowerBound, upperBound, inputName) {
    if (inputName === void 0) { inputName = ''; }
    var messageSuffix = inputName === '' ? 'invalid length' : "invalid ".concat(inputName, " length");
    (0, assert_1.default)(input.gte(lowerBound) && input.lt(upperBound), "Message not signable, ".concat(messageSuffix, "."));
}
exports.assertInRange = assertInRange;
var Range = (function () {
    function Range(lowerBound, upperBound) {
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
    }
    return Range;
}());
exports.Range = Range;
function assertInMultiRange(input, ranges, inputName) {
    if (inputName === void 0) { inputName = ''; }
    var messageSuffix = inputName === '' ? 'invalid length' : "invalid ".concat(inputName, " length");
    for (var i = 0; i < ranges.length; i++) {
        if (input.gte(ranges[i].lowerBound) && input.lt(ranges[i].upperBound)) {
            return;
        }
    }
    (0, assert_1.default)(false, "Message not signable, ".concat(messageSuffix, "."));
}
exports.assertInMultiRange = assertInMultiRange;
//# sourceMappingURL=message_utils.js.map