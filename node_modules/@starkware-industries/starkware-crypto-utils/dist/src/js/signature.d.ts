import BN from 'bn.js';
import { ec as EllipticCurve } from 'elliptic';
import { Range, assertInMultiRange, assertInRange } from './message_utils';
declare const prime: BN;
declare const maxEcdsaVal: BN;
declare const starkEc: EllipticCurve;
declare const constantPoints: any[];
declare const shiftPoint: any;
declare function pedersen(input: Array<string>): any;
declare function getLimitOrderMsgHash(vaultSell: number, vaultBuy: number, amountSell: string, amountBuy: string, tokenSell: string, tokenBuy: string, nonce: number, expirationTimestamp: number): any;
declare function getLimitOrderMsgHashWithFee(vaultSell: number, vaultBuy: number, amountSell: string, amountBuy: string, tokenSell: string, tokenBuy: string, nonce: number, expirationTimestamp: number, feeToken: string, feeVaultId: number, feeLimit: string): any;
declare function getTransferMsgHash(amount: string, nonce: number, senderVaultId: number, token: string, receiverVaultId: number, receiverPublicKey: string, expirationTimestamp: number, condition?: string | null): any;
declare function getTransferMsgHashWithFee(amount: string, nonce: number, senderVaultId: number, token: string, receiverVaultId: number, receiverStarkKey: string, expirationTimestamp: number, feeToken: string, feeVaultId: number, feeLimit: string, condition?: string | null): any;
declare function sign(privateKey: EllipticCurve.KeyPair, msgHash: string): EllipticCurve.Signature;
declare function verify(publicKey: EllipticCurve.KeyPair, msgHash: string, msgSignature: EllipticCurve.Signature): boolean;
export { prime, starkEc as ec, constantPoints, shiftPoint, maxEcdsaVal, Range, pedersen, getLimitOrderMsgHash, getTransferMsgHash, sign, verify, assertInRange, assertInMultiRange, getTransferMsgHashWithFee, getLimitOrderMsgHashWithFee };
