"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var key_derivation_1 = require("../../src/js/key_derivation");
var keys_precomputed_json_1 = __importDefault(require("../../src/config/keys_precomputed.json"));
var layer = 'starkex';
var application = 'starkdeployement';
var mnemonic = 'range mountain blast problem vibrant void vivid doctor cluster enough melody ' +
    'salt layer language laptop boat major space monkey unit glimpse pause change vibrant';
var ethAddress = '0xa4864d977b944315389d1765ffa7e66F74ee8cd7';
describe('Key derivation', function () {
    it('should derive key from mnemonic and eth-address correctly', function () {
        var index = 0;
        var path = (0, key_derivation_1.getAccountPath)(layer, application, ethAddress, index);
        var keyPair = (0, key_derivation_1.getKeyPairFromPath)(mnemonic, path);
        (0, chai_1.expect)(keyPair.getPrivate('hex')).to.equal('06cf0a8bf113352eb863157a45c5e5567abb34f8d32cddafd2c22aa803f4892c');
        index = 7;
        path = (0, key_derivation_1.getAccountPath)(layer, application, ethAddress, index);
        keyPair = (0, key_derivation_1.getKeyPairFromPath)(mnemonic, path);
        (0, chai_1.expect)(keyPair.getPrivate('hex')).to.equal('0341751bdc42841da35ab74d13a1372c1f0250617e8a2ef96034d9f46e6847af');
        index = 598;
        path = (0, key_derivation_1.getAccountPath)(layer, application, ethAddress, index);
        keyPair = (0, key_derivation_1.getKeyPairFromPath)(mnemonic, path);
        (0, chai_1.expect)(keyPair.getPrivate('hex')).to.equal('041a4d591a868353d28b7947eb132aa4d00c4a022743689ffd20a3628d6ca28c');
    });
});
describe('Key grinding', function () {
    it('should produce the correct ground key', function () {
        var privateKey = '86F3E7293141F20A8BAFF320E8EE4ACCB9D4A4BF2B4D295E8CEE784DB46E0519';
        (0, chai_1.expect)((0, key_derivation_1.grindKey)(privateKey, key_derivation_1.StarkExEc)).to.equal('5c8c8683596c732541a59e03007b2d30dbbbb873556fe65b5fb63c16688f941');
    });
});
describe('Private to stark key', function () {
    it('should derive public stark key from private correctly', function () {
        Object.entries(keys_precomputed_json_1.default).forEach(function (_a) {
            var _b = __read(_a, 2), privKey = _b[0], expectedPubKey = _b[1];
            var pubKey = '0x' + (0, key_derivation_1.privateToStarkKey)(privKey);
            (0, chai_1.expect)(pubKey).to.equal(expectedPubKey);
        });
    });
});
describe('Private stark key from eth signature', function () {
    it('should derive private stark key from eth signature correctly', function () {
        var ethSignature = '0x21fbf0696d5e0aa2ef41a2b4ffb623bcaf070461d61cf7251c74161f82fec3a43' +
            '70854bc0a34b3ab487c1bc021cd318c734c51ae29374f2beb0e6f2dd49b4bf41c';
        (0, chai_1.expect)((0, key_derivation_1.getPrivateKeyFromEthSignature)(ethSignature)).to.equal('766f11e90cd7c7b43085b56da35c781f8c067ac0d578eabdceebc4886435bda');
    });
});
//# sourceMappingURL=key_derivation.spec.js.map