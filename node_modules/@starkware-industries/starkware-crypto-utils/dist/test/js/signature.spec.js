"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var signature_1 = require("../../src/js/signature");
var rfc6979_signature_test_vector_json_1 = __importDefault(require("../config/rfc6979_signature_test_vector.json"));
var signature_test_data_json_1 = __importDefault(require("../config/signature_test_data.json"));
var bn_js_1 = __importDefault(require("bn.js"));
var chai_1 = require("chai");
function generateRandomStarkPrivateKey() {
    return randomHexString(63);
}
function randomHexString(length, leading0x) {
    if (leading0x === void 0) { leading0x = false; }
    var result = randomString('0123456789ABCDEF', length);
    return leading0x ? '0x' + result : result;
}
function randomString(characters, length) {
    var result = '';
    for (var i = 0; i < length; ++i) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
}
describe('Verify', function () {
    var oneBn = new bn_js_1.default('1', 16);
    it('should verify valid signatures', function () {
        var privKey = generateRandomStarkPrivateKey();
        var keyPair = signature_1.ec.keyFromPrivate(privKey, 'hex');
        var keyPairPub = signature_1.ec.keyFromPublic(keyPair.getPublic(), 'BN');
        var msgHash = new bn_js_1.default(randomHexString(61));
        var msgSignature = (0, signature_1.sign)(keyPair, msgHash);
        (0, chai_1.expect)((0, signature_1.verify)(keyPair, msgHash.toString(16), msgSignature)).to.be.true;
        (0, chai_1.expect)((0, signature_1.verify)(keyPairPub, msgHash.toString(16), msgSignature)).to.be.true;
    });
    it('should not verify invalid signature inputs lengths', function () {
        var ecOrder = signature_1.ec.n;
        var maxMsgHash = signature_1.maxEcdsaVal.sub(oneBn);
        var maxR = signature_1.maxEcdsaVal.sub(oneBn);
        var maxS = ecOrder.sub(oneBn).sub(oneBn);
        var maxStarkKey = signature_1.maxEcdsaVal.sub(oneBn);
        (0, chai_1.expect)(function () {
            return (0, signature_1.verify)(maxStarkKey, maxMsgHash.add(oneBn).toString(16), {
                r: maxR,
                s: maxS
            });
        }).to.throw('Message not signable, invalid msgHash length.');
        (0, chai_1.expect)(function () {
            return (0, signature_1.verify)(maxStarkKey, maxMsgHash.toString(16), {
                r: maxR.add(oneBn),
                s: maxS
            });
        }).to.throw('Message not signable, invalid r length.');
        (0, chai_1.expect)(function () {
            return (0, signature_1.verify)(maxStarkKey, maxMsgHash.toString(16), {
                r: maxR,
                s: maxS.add(oneBn)
            });
        }).to.throw('Message not signable, invalid w length.');
        (0, chai_1.expect)(function () {
            return (0, signature_1.verify)(maxStarkKey, maxMsgHash.toString(16), {
                r: maxR,
                s: maxS.add(oneBn).add(oneBn)
            });
        }).to.throw('Message not signable, invalid s length.');
    });
    it('should not verify invalid signatures', function () {
        var privKey = generateRandomStarkPrivateKey();
        var keyPair = signature_1.ec.keyFromPrivate(privKey, 'hex');
        var keyPairPub = signature_1.ec.keyFromPublic(keyPair.getPublic(), 'BN');
        var msgHash = new bn_js_1.default(randomHexString(61));
        var msgSignature = (0, signature_1.sign)(keyPair, msgHash);
        var invalidKeyPairPub = signature_1.ec.keyFromPublic({ x: keyPairPub.pub.getX().add(oneBn), y: keyPairPub.pub.getY() }, 'BN');
        (0, chai_1.expect)((0, signature_1.verify)(invalidKeyPairPub, msgHash.toString(16), msgSignature)).to.be
            .false;
        (0, chai_1.expect)((0, signature_1.verify)(keyPair, msgHash.add(oneBn).toString(16), msgSignature)).to.be
            .false;
        (0, chai_1.expect)((0, signature_1.verify)(keyPairPub, msgHash.add(oneBn).toString(16), msgSignature)).to
            .be.false;
        msgSignature.r.iadd(oneBn);
        (0, chai_1.expect)((0, signature_1.verify)(keyPair, msgHash.toString(16), msgSignature)).to.be.false;
        (0, chai_1.expect)((0, signature_1.verify)(keyPairPub, msgHash.toString(16), msgSignature)).to.be.false;
        msgSignature.r.isub(oneBn);
        msgSignature.s.iadd(oneBn);
        (0, chai_1.expect)((0, signature_1.verify)(keyPair, msgHash.toString(16), msgSignature)).to.be.false;
        (0, chai_1.expect)((0, signature_1.verify)(keyPairPub, msgHash.toString(16), msgSignature)).to.be.false;
    });
});
describe('Signature', function () {
    it('should sign all message hash lengths', function () {
        var privateKey = '2dccce1da22003777062ee0870e9881b460a8b7eca276870f57c601f182136c';
        var keyPair = signature_1.ec.keyFromPrivate(privateKey, 'hex');
        var publicKey = signature_1.ec.keyFromPublic(keyPair.getPublic(true, 'hex'), 'hex');
        function testSignature(msgHash, expectedR, expectedS) {
            var msgSignature = (0, signature_1.sign)(keyPair, msgHash);
            (0, chai_1.expect)((0, signature_1.verify)(publicKey, msgHash, msgSignature)).to.be.true;
            var r = msgSignature.r, s = msgSignature.s;
            (0, chai_1.expect)(r.toString(16)).to.equal(expectedR);
            (0, chai_1.expect)(s.toString(16)).to.equal(expectedS);
        }
        testSignature('c465dd6b1bbffdb05442eb17f5ca38ad1aa78a6f56bf4415bdee219114a47', '5f496f6f210b5810b2711c74c15c05244dad43d18ecbbdbe6ed55584bc3b0a2', '4e8657b153787f741a67c0666bad6426c3741b478c8eaa3155196fc571416f3');
        testSignature('00c465dd6b1bbffdb05442eb17f5ca38ad1aa78a6f56bf4415bdee219114a47', '5f496f6f210b5810b2711c74c15c05244dad43d18ecbbdbe6ed55584bc3b0a2', '4e8657b153787f741a67c0666bad6426c3741b478c8eaa3155196fc571416f3');
        testSignature('c465dd6b1bbffdb05442eb17f5ca38ad1aa78a6f56bf4415bdee219114a47a', '233b88c4578f0807b4a7480c8076eca5cfefa29980dd8e2af3c46a253490e9c', '28b055e825bc507349edfb944740a35c6f22d377443c34742c04e0d82278cf1');
        testSignature('7465dd6b1bbffdb05442eb17f5ca38ad1aa78a6f56bf4415bdee219114a47a1', 'b6bee8010f96a723f6de06b5fa06e820418712439c93850dd4e9bde43ddf', '1a3d2bc954ed77e22986f507d68d18115fa543d1901f5b4620db98e2f6efd80');
    });
});
describe('Pedersen Hash', function () {
    it('should hash correctly', function () {
        var e_1, _a;
        try {
            for (var _b = __values([
                signature_test_data_json_1.default.hash_test.pedersen_hash_data_1,
                signature_test_data_json_1.default.hash_test.pedersen_hash_data_2
            ]), _c = _b.next(); !_c.done; _c = _b.next()) {
                var hashTestData = _c.value;
                (0, chai_1.expect)((0, signature_1.pedersen)([
                    hashTestData.input_1.substring(2),
                    hashTestData.input_2.substring(2)
                ])).to.equal(hashTestData.output.substring(2));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
});
describe('Signature Tests', function () {
    it('should create ecdsa deterministic signatures', function () {
        var privateKey = rfc6979_signature_test_vector_json_1.default.private_key.substring(2);
        var keyPair = signature_1.ec.keyFromPrivate(privateKey, 'hex');
        var i = 0;
        for (; i < rfc6979_signature_test_vector_json_1.default.messages.length; i++) {
            var msgHash = rfc6979_signature_test_vector_json_1.default.messages[i].hash.substring(2);
            var msgSignature = (0, signature_1.sign)(keyPair, msgHash);
            var r = msgSignature.r, s = msgSignature.s;
            (0, chai_1.expect)(r.toString(10)).to.equal(rfc6979_signature_test_vector_json_1.default.messages[i].r);
            (0, chai_1.expect)(s.toString(10)).to.equal(rfc6979_signature_test_vector_json_1.default.messages[i].s);
        }
    });
});
//# sourceMappingURL=signature.spec.js.map